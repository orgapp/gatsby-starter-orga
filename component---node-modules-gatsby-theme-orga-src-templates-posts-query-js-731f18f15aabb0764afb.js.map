{"version":3,"sources":["webpack:///./node_modules/gatsby-theme-orga/src/templates/posts-query.js","webpack:///./src/gatsby-theme-orga/components/posts.js","webpack:///./.cache/public-page-renderer.js","webpack:///./.cache/gatsby-browser-entry.js","webpack:///./.cache/public-page-renderer-prod.js","webpack:///./src/components/layout.js"],"names":["Component","Post","title","slug","key","to","PaginationLink","url","children","mapProps","posts","prev","next","map","style","display","data","pageContext","p","metadata","fields","m","module","exports","require","default","loader","enqueue","React","createContext","ProdPageRenderer","location","pageResources","createElement","InternalPageRenderer","json"],"mappings":"2GAEiBA,E,kCCEXC,EAAO,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,KAAV,OACX,yBAAKC,IAAKD,GACR,kBAAC,IAAD,CAAME,GAAIF,GACND,KAKFI,EAAiB,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,IAAKC,EAAe,EAAfA,SAC7B,OAAKD,EAEH,kBAAC,IAAD,CAAMF,GAAIE,GAAOC,GAFF,MDJJC,WAPET,ECiBF,YAA4B,IAAzBU,EAAwB,EAAxBA,MAAOC,EAAiB,EAAjBA,KAAMC,EAAW,EAAXA,KAC7B,OACE,kBAAC,IAAD,KACE,6BACE,0CAEF,6BACIF,EAAMG,IAAIZ,IAEd,yBAAKa,MAAO,CAAEC,QAAS,SACrB,kBAAC,EAAD,CAAgBR,IAAKI,GAArB,2BAGA,kBAAC,EAAD,CAAgBJ,IAAKK,GAArB,wBD9BsB,cAAGI,KAAH,IAASC,EAAT,EAASA,YAAT,OACxBjB,EAAU,CACRU,MAAOO,EAAYP,MAAMG,KAAI,SAAAK,GAAC,wBAAUA,EAAEC,SAAZ,GAAyBD,EAAEE,WACzDT,KAAMM,EAAYN,KAClBC,KAAMK,EAAYL,U,oBEN1B,IAAsBS,EAKpBC,EAAOC,SALaF,EAKWG,EAAQ,OALRH,EAAEI,SAAYJ,G,iCCA/C,qFAcyBK,QAAOC,QAELC,IAAMC,cAAc,K,0ECMhCC,UAjBU,SAAC,GAAiC,IAA/BC,EAA8B,EAA9BA,SAAUC,EAAoB,EAApBA,cACpC,OAAKA,EAGEJ,IAAMK,cAAcC,IAApB,eACLH,WACAC,iBACGA,EAAcG,OALV,O,iCCPX,6BAGe,gBAAmB,IAAhB3B,EAAe,EAAfA,SAChB,OACE,6BACE,kBAAC,IAAD,CAAMH,GAAG,KACP,qDAEF,yBAAKS,MAAO,CAAEC,QAAS,SACrB,kBAAC,IAAD,CAAMV,GAAG,OACP,gDAKJ,8BACIG","file":"component---node-modules-gatsby-theme-orga-src-templates-posts-query-js-731f18f15aabb0764afb.js","sourcesContent":["import PostsPage from \"../components/posts\"\n\nconst mapProps = Component => ({ data, pageContext }) =>\n      Component({\n        posts: pageContext.posts.map(p => ({ ...p.metadata, ...p.fields })),\n        prev: pageContext.prev,\n        next: pageContext.next,\n      })\n\nexport default mapProps(PostsPage)\n","import React from 'react'\nimport { Link } from 'gatsby'\nimport Layout from '../../components/layout'\n\nconst Post = ({ title, slug }) => (\n  <div key={slug}>\n    <Link to={slug}>\n      { title }\n    </Link>\n  </div>\n)\n\nconst PaginationLink = ({ url, children }) => {\n  if (!url) return null\n  return (\n    <Link to={url}>{ children }</Link>\n  )\n}\n\nexport default ({ posts, prev, next }) => {\n  return (\n    <Layout>\n      <div>\n        <h2>All Posts</h2>\n      </div>\n      <div>\n        { posts.map(Post) }\n      </div>\n      <div style={{ display: 'flex' }}>\n        <PaginationLink url={prev}>\n          ◄ See more recent notes\n        </PaginationLink>\n        <PaginationLink url={next}>\n          See older notes ►\n        </PaginationLink>\n      </div>\n    </Layout>\n  )\n}\n","const preferDefault = m => (m && m.default) || m\n\nif (process.env.BUILD_STAGE === `develop`) {\n  module.exports = preferDefault(require(`./public-page-renderer-dev`))\n} else if (process.env.BUILD_STAGE === `build-javascript`) {\n  module.exports = preferDefault(require(`./public-page-renderer-prod`))\n} else {\n  module.exports = () => null\n}\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Link, {\n  withPrefix,\n  withAssetPrefix,\n  navigate,\n  push,\n  replace,\n  navigateTo,\n  parsePath,\n} from \"gatsby-link\"\nimport PageRenderer from \"./public-page-renderer\"\nimport loader from \"./loader\"\n\nconst prefetchPathname = loader.enqueue\n\nconst StaticQueryContext = React.createContext({})\n\nfunction StaticQueryDataRenderer({ staticQueryData, data, query, render }) {\n  const finalData = data\n    ? data.data\n    : staticQueryData[query] && staticQueryData[query].data\n\n  return (\n    <React.Fragment>\n      {finalData && render(finalData)}\n      {!finalData && <div>Loading (StaticQuery)</div>}\n    </React.Fragment>\n  )\n}\n\nconst StaticQuery = props => {\n  const { data, query, render, children } = props\n\n  return (\n    <StaticQueryContext.Consumer>\n      {staticQueryData => (\n        <StaticQueryDataRenderer\n          data={data}\n          query={query}\n          render={render || children}\n          staticQueryData={staticQueryData}\n        />\n      )}\n    </StaticQueryContext.Consumer>\n  )\n}\n\nconst useStaticQuery = query => {\n  if (\n    typeof React.useContext !== `function` &&\n    process.env.NODE_ENV === `development`\n  ) {\n    throw new Error(\n      `You're likely using a version of React that doesn't support Hooks\\n` +\n        `Please update React and ReactDOM to 16.8.0 or later to use the useStaticQuery hook.`\n    )\n  }\n  const context = React.useContext(StaticQueryContext)\n  if (context[query] && context[query].data) {\n    return context[query].data\n  } else {\n    throw new Error(\n      `The result of this StaticQuery could not be fetched.\\n\\n` +\n        `This is likely a bug in Gatsby and if refreshing the page does not fix it, ` +\n        `please open an issue in https://github.com/gatsbyjs/gatsby/issues`\n    )\n  }\n}\n\nStaticQuery.propTypes = {\n  data: PropTypes.object,\n  query: PropTypes.string.isRequired,\n  render: PropTypes.func,\n  children: PropTypes.func,\n}\n\nfunction graphql() {\n  throw new Error(\n    `It appears like Gatsby is misconfigured. Gatsby related \\`graphql\\` calls ` +\n      `are supposed to only be evaluated at compile time, and then compiled away. ` +\n      `Unfortunately, something went wrong and the query was left in the compiled code.\\n\\n` +\n      `Unless your site has a complex or custom babel/Gatsby configuration this is likely a bug in Gatsby.`\n  )\n}\n\nexport {\n  Link,\n  withAssetPrefix,\n  withPrefix,\n  graphql,\n  parsePath,\n  navigate,\n  push, // TODO replace for v3\n  replace, // TODO remove replace for v3\n  navigateTo, // TODO: remove navigateTo for v3\n  StaticQueryContext,\n  StaticQuery,\n  PageRenderer,\n  useStaticQuery,\n  prefetchPathname,\n}\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport InternalPageRenderer from \"./page-renderer\"\n\nconst ProdPageRenderer = ({ location, pageResources }) => {\n  if (!pageResources) {\n    return null\n  }\n  return React.createElement(InternalPageRenderer, {\n    location,\n    pageResources,\n    ...pageResources.json,\n  })\n}\n\nProdPageRenderer.propTypes = {\n  location: PropTypes.shape({\n    pathname: PropTypes.string.isRequired,\n  }).isRequired,\n}\n\nexport default ProdPageRenderer\n","import React from 'react'\nimport { Link } from 'gatsby'\n\nexport default ({ children }) => {\n  return (\n    <div>\n      <Link to='/'>\n        <pre>My org-mode Website</pre>\n      </Link>\n      <div style={{ display: 'flex' }}>\n        <Link to='/cv'>\n          <button>\n            View My CV\n          </button>\n        </Link>\n      </div>\n      <main>\n        { children }\n      </main>\n    </div>\n  )\n}\n"],"sourceRoot":""}